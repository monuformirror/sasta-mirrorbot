name: Deploy
on:
  workflow_dispatch:
  push:
     branches: [ android ]

defaults:
  run:
    shell: bash

env:
  LINK: https://mega.nz/file/5LtGFRSa#CagW3K-wsnBiuomGsa-PQGGldyYcc59XggBoUAqqsz8
  RCLONE_CONF: ${{ secrets.RCLONE_CONF }}
  TG_TOKEN: ${{ secrets.TG_TOKEN }}
  TG_ID: ${{ secrets.TG_ID }}
  TYPE_FILE_ANDROID: apk
  GAME_TYPE_ANDROID: Summer Time Saga

jobs:
  deploy-android:
    name: Android Mirrorer
    runs-on: ubuntu-latest
    if: github.actor == 'AnGgIt88'
    container:
      image: anggit86/docker:mirrorer

    steps:
      - uses: actions/checkout@v2
      - name: setup config drive
        run: |
          mkdir -p ~/.config/rclone
          echo "$RCLONE_CONF" > ~/.config/rclone/rclone.conf

      - name: Download
        run: |
          mega-get ${LINK} $PWD

      - name: Upload
        run: |
          rclone copy --drive-chunk-size 256M --stats 1s $PWD/*.${TYPE_FILE_ANDROID} NFS: -P

      - name: Link Download
        run: |
          LINK_MIRROR=https://nfs.projek.workers.dev/0:/$(basename $PWD/*.${TYPE_FILE_ANDROID})
          export TZ=Asia/Jakarta
          telegram_message() {
               curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
               -d chat_id="${TG_ID}" \
               -d parse_mode="HTML" \
               -d text="$1"
          }
          TXT_CAPTION="âœ…Mirrorer Successfully!
          
          ðŸš€ Name: <code>$(cd $PWD && ls *apk -m1 | cut -d . -f 1-2)</code>
          ðŸ”¥ File Type: <code>${TYPE_FILE_ANDROID}</code>
          ðŸ§¨ Game Type: <code>${GAME_TYPE_ANDROID}</code>
          ðŸ”— Download Link: <a href=\"${LINK_MIRROR}\">Here</a>
          ðŸ“… Date: <code>$(date +%d\ %B\ %Y)</code>
          ðŸ•” Time Zone: <code>$(date +%T)</code>"
          TG_TEXT="${TXT_CAPTION}"
          telegram_message "$TG_TEXT"
